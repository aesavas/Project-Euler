"""
author : aesavas

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
(It is working slowly but it finds correct answer. Time problem will be handled.)
"""

import time

start = time.time()

def findNumberOfFactors(number):
    factor = 2
    factorList = list()
    while number != 1:
        numberOfPrime = 0
        while number % factor == 0:
            number = int(number / factor)
            numberOfPrime += 1
        factorList.append(numberOfPrime)
        factor += 1
    numberOfFactors = 1
    for i in factorList:
        numberOfFactors *= (i+1)
    if numberOfFactors >= 500:
        print("Number of Factors : ", numberOfFactors)
        return True
    return False

#main
sumOfTriangleNumbers = 1
counter = 2
while not findNumberOfFactors(sumOfTriangleNumbers):
    sumOfTriangleNumbers += counter
    counter += 1
print("The value of the first triangle number to have over five hundred divisors : ", sumOfTriangleNumbers)
print("Time : ", time.time() - start)